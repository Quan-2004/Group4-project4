import React, { useState, useEffect } from 'react';
import axios from 'axios';
import UserList from './components/UserList';
import AddUser from './components/AddUser';
import Toast from './components/Toast';
import './App.css';

// ƒê·ªãnh nghƒ©a URL c·ªßa backend ƒë·ªÉ d·ªÖ d√†ng thay ƒë·ªïi khi c·∫ßn
const API_URL = "http://localhost:8080/api/users"; // D√πng port 3000 ho·∫∑c port c·ªßa backend

function App() {
    // T·∫°o bi·∫øn tr·∫°ng th√°i 'users' ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch ng∆∞·ªùi d√πng
    const [users, setUsers] = useState([]);
    
    // State cho toast notification
    const [toast, setToast] = useState(null);

    // H√†m hi·ªÉn th·ªã toast
    const showToast = (message, type = 'success') => {
        setToast({ message, type });
    };

    // useEffect l√† m·ªôt "hook" ƒë·∫∑c bi·ªát c·ªßa React.
    // Code b√™n trong n√≥ s·∫Ω ƒë∆∞·ª£c ch·∫°y sau khi component ƒë∆∞·ª£c render l·∫ßn ƒë·∫ßu ti√™n.
    // D·∫•u ngo·∫∑c vu√¥ng [] ·ªü cu·ªëi c√≥ nghƒ©a l√† "ch·ªâ ch·∫°y ƒë√∫ng 1 l·∫ßn duy nh·∫•t".
    useEffect(() => {
        // ƒê·ªãnh nghƒ©a m·ªôt h√†m ƒë·ªÉ g·ªçi API v√† l·∫•y danh s√°ch ng∆∞·ªùi d√πng
        const fetchUsers = async () => {
            try {
                const response = await axios.get(API_URL);
                setUsers(response.data); // C·∫≠p nh·∫≠t danh s√°ch users v·ªõi d·ªØ li·ªáu t·ª´ server
            } catch (error) {
                console.error("L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng:", error);
            }
        };

        fetchUsers(); // G·ªçi h√†m ƒë√≥
    }, []);

    // H√†m n√†y s·∫Ω ƒë∆∞·ª£c truy·ªÅn xu·ªëng cho component AddUser
    const handleUserAdded = async (newUser) => {
        try {
            // G·ª≠i d·ªØ li·ªáu ng∆∞·ªùi d√πng m·ªõi l√™n server b·∫±ng ph∆∞∆°ng th·ª©c POST
            const response = await axios.post(API_URL, newUser);
            
            // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng tr√™n giao di·ªán m√† kh√¥ng c·∫ßn t·∫£i l·∫°i trang
            setUsers([...users, response.data]);
            showToast('‚ú® Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng!', 'success');
        } catch (error) {
            console.error("L·ªói khi th√™m ng∆∞·ªùi d√πng:", error);
            showToast('‚ùå Kh√¥ng th·ªÉ th√™m ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i!', 'error');
        }
    };

    // H√†m x√≥a ng∆∞·ªùi d√πng
    const handleDeleteUser = async (userId) => {
        try {
            await axios.delete(`${API_URL}/${userId}`);
            // C·∫≠p nh·∫≠t danh s√°ch b·∫±ng c√°ch lo·∫°i b·ªè user ƒë√£ x√≥a
            setUsers(users.filter(user => user.id !== userId));
            showToast('üóëÔ∏è ƒê√£ x√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!', 'success');
        } catch (error) {
            console.error("L·ªói khi x√≥a ng∆∞·ªùi d√πng:", error);
            showToast('‚ùå Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i!', 'error');
        }
    };

    // H√†m c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng
    const handleUpdateUser = async (userId, updatedUser) => {
        try {
            const response = await axios.put(`${API_URL}/${userId}`, updatedUser);
            // C·∫≠p nh·∫≠t danh s√°ch v·ªõi th√¥ng tin m·ªõi
            setUsers(users.map(user => 
                user.id === userId ? response.data : user
            ));
            showToast('‚úèÔ∏è C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng!', 'success');
        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", error);
            showToast('‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i!', 'error');
        }
    };

    return (
        <div className="App">
            <h1>üéØ Qu·∫£n L√Ω Ng∆∞·ªùi D√πng</h1>
            <div className="app-container">
                {/* Truy·ªÅn h√†m handleUserAdded xu·ªëng cho AddUser */}
                <AddUser onUserAdded={handleUserAdded} />
                {/* Truy·ªÅn danh s√°ch users v√† c√°c h√†m x·ª≠ l√Ω xu·ªëng cho UserList */}
                <UserList 
                    users={users} 
                    onDeleteUser={handleDeleteUser}
                    onUpdateUser={handleUpdateUser}
                />
            </div>
            
            {/* Toast notification */}
            {toast && (
                <Toast
                    message={toast.message}
                    type={toast.type}
                    onClose={() => setToast(null)}
                />
            )}
        </div>
    );
}

export default App;