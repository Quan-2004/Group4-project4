// frontend/src/pages/AdminPage.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import Toast from '../components/Toast';
import ConfirmModal from '../components/ConfirmModal';
import './AdminPage.css';

const AdminPage = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [toast, setToast] = useState({ show: false, message: '', type: '' });
  const [confirmModal, setConfirmModal] = useState({ show: false, userId: null, userName: '' });
  const navigate = useNavigate();

  // L·∫•y danh s√°ch users t·ª´ backend
  const fetchUsers = async () => {
    try {
      setLoading(true);
      const userInfo = JSON.parse(localStorage.getItem('userInfo'));
      const config = {
        headers: {
          Authorization: `Bearer ${userInfo.token}`
        }
      };

      const { data } = await axios.get('http://localhost:8080/api/users', config);
      setUsers(data);
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch users:', error);
      showToast(
        error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng',
        'error'
      );
      
      // N·∫øu token h·∫øt h·∫°n
      if (error.response?.status === 401) {
        localStorage.removeItem('userInfo');
        navigate('/login');
      }
    } finally {
      setLoading(false);
    }
  };

  // Ki·ªÉm tra quy·ªÅn Admin
  useEffect(() => {
    const checkAdminAccess = () => {
      const userInfo = localStorage.getItem('userInfo');
      
      if (!userInfo) {
        showToast('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p', 'error');
        navigate('/login');
        return false;
      }

      const user = JSON.parse(userInfo);
      
      // Ki·ªÉm tra role Admin
      if (user.role !== 'Admin') {
        showToast('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y', 'error');
        navigate('/');
        return false;
      }

      return true;
    };

    if (!checkAdminAccess()) {
      return;
    }

    fetchUsers();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [navigate]);

  const showToast = (message, type) => {
    setToast({ show: true, message, type });
    setTimeout(() => setToast({ show: false, message: '', type: '' }), 3000);
  };

  // M·ªü modal x√°c nh·∫≠n x√≥a
  const handleDeleteClick = (userId, userName) => {
    setConfirmModal({ show: true, userId, userName });
  };

  // X√°c nh·∫≠n x√≥a user
  const confirmDelete = async () => {
    const { userId } = confirmModal;
    
    try {
      const userInfo = JSON.parse(localStorage.getItem('userInfo'));
      const config = {
        headers: {
          Authorization: `Bearer ${userInfo.token}`
        }
      };

      await axios.delete(`http://localhost:8080/api/users/${userId}`, config);
      
      // C·∫≠p nh·∫≠t danh s√°ch sau khi x√≥a
      setUsers(users.filter(user => user._id !== userId));
      showToast('ƒê√£ x√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng', 'success');
      setConfirmModal({ show: false, userId: null, userName: '' });
    } catch (error) {
      console.error('L·ªói khi x√≥a user:', error);
      showToast(
        error.response?.data?.message || 'Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng',
        'error'
      );
    }
  };

  // H·ªßy x√≥a
  const cancelDelete = () => {
    setConfirmModal({ show: false, userId: null, userName: '' });
  };

  // L·ªçc users theo search query
  const filteredUsers = users.filter(user => {
    const query = searchQuery.toLowerCase();
    return (
      user.name?.toLowerCase().includes(query) ||
      user.email?.toLowerCase().includes(query) ||
      user.role?.toLowerCase().includes(query)
    );
  });

  // Format ng√†y th√°ng
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <div className="admin-page">
        <div className="loading-container">
          <div className="spinner"></div>
          <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="admin-page">
      {toast.show && <Toast message={toast.message} type={toast.type} />}
      
      {confirmModal.show && (
        <ConfirmModal
          message={`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng "${confirmModal.userName}"?`}
          onConfirm={confirmDelete}
          onCancel={cancelDelete}
        />
      )}

      <div className="admin-container">
        <div className="admin-header">
          <div className="admin-title-section">
            <h1>üë®‚Äçüíº Qu·∫£n L√Ω Ng∆∞·ªùi D√πng (Admin)</h1>
            <p className="admin-subtitle">Qu·∫£n l√Ω t·∫•t c·∫£ ng∆∞·ªùi d√πng trong h·ªá th·ªëng</p>
          </div>
          <button className="btn-refresh" onClick={fetchUsers} disabled={loading}>
            üîÑ L√†m m·ªõi
          </button>
        </div>

        <div className="admin-toolbar">
          <div className="search-box">
            <span className="search-icon">üîç</span>
            <input
              type="text"
              placeholder="T√¨m ki·∫øm theo t√™n, email ho·∫∑c role..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="search-input"
            />
          </div>
          <div className="stats-box">
            <span className="stats-label">T·ªïng s·ªë:</span>
            <span className="stats-value">{filteredUsers.length} ng∆∞·ªùi d√πng</span>
          </div>
        </div>

        <div className="users-table-container">
          {filteredUsers.length === 0 ? (
            <div className="no-users">
              <p>Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o</p>
            </div>
          ) : (
            <table className="users-table">
              <thead>
                <tr>
                  <th>STT</th>
                  <th>T√™n</th>
                  <th>Email</th>
                  <th>Vai tr√≤</th>
                  <th>Ng√†y t·∫°o</th>
                  <th>H√†nh ƒë·ªông</th>
                </tr>
              </thead>
              <tbody>
                {filteredUsers.map((user, index) => (
                  <tr key={user._id} className="user-row">
                    <td>{index + 1}</td>
                    <td>
                      <div className="user-name-cell">
                        <span className="user-avatar-small">
                          {user.name?.charAt(0).toUpperCase()}
                        </span>
                        <span className="user-name">{user.name}</span>
                      </div>
                    </td>
                    <td className="user-email">{user.email}</td>
                    <td>
                      <span className={`role-badge role-${user.role?.toLowerCase()}`}>
                        {user.role === 'Admin' ? 'üëë Admin' : 'üë§ User'}
                      </span>
                    </td>
                    <td className="user-date">
                      {user.createdAt ? formatDate(user.createdAt) : 'N/A'}
                    </td>
                    <td>
                      <div className="action-buttons">
                        <button
                          className="btn-delete"
                          onClick={() => handleDeleteClick(user._id, user.name)}
                          title="X√≥a ng∆∞·ªùi d√πng"
                        >
                          üóëÔ∏è X√≥a
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>

        <div className="admin-footer">
          <p className="footer-note">
            ‚ö†Ô∏è L∆∞u √Ω: H√£y th·∫≠n tr·ªçng khi x√≥a ng∆∞·ªùi d√πng. H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.
          </p>
        </div>
      </div>
    </div>
  );
};

export default AdminPage;
